#!/usr/bin/perl
use strict;
use warnings;
use List::Util qw[min max];

# extract pictures from pnm + fig, convert colors
# usage: $0 file1.pnm ...

# convert fig line with a rectanle into its dimensions
sub get_bbox{
  my $l=shift;
  $l=~s/^\s+//;  $l=~s/\s+$//;
  my @bbox = split /\s+/, $l;
  my $x1 = min(map { $bbox[$_*2] }   0..int(@bbox/2)-1);
  my $y1 = min(map { $bbox[$_*2+1] } 0..int(@bbox/2)-1);
  my $x2 = max(map { $bbox[$_*2] }   0..int(@bbox/2)-1);
  my $y2 = max(map { $bbox[$_*2+1] } 0..int(@bbox/2)-1);
  return $x1, $x2, $y1, $y2;
}

foreach my $n (@ARGV){
  $n=~s/.pnm$//;
  my $fig="$n.fig";
  my $pnm="$n.pnm";
  my $ir="$n.ir";
  my $jpg="$n.jpg";
  print "Processing $n\n";

  # dimensions of the pnm file
  open F, $pnm or die "can't open $pnm: $!\n";
  my $l=readline(F); #P6
  $l=readline(F); 
  $l=readline(F) if $l=~/^#/; # reread if it was a comment
  my ($W,$H) = split /\s+/, $l;
  close F;
  print "  file size: $W x $H\n";

  # extract information from the fig file:
  my @frames;
  my @texts;
  my ($fW, $fH) = (0,0);
  open F, $fig or die "can't open $fig: $!\n";
  my $mode=0; # 0 - skip data; 1 - read image simensions; 2 - read frame box;
  foreach (<F>){
    if ($mode==1){
      my ($x1,$x2,$y1,$y2) = get_bbox($_);
      $fW=($x2-$x1);
      $fH=($y2-$y1);
      $mode=0;
      next;
    }
    if ($mode==2){
      my ($x1,$x2,$y1,$y2) = get_bbox($_);
      push @frames, {x1=>$x1, x2=>$x2, y1=>$y1, y2=>$y2, sortkey=> int($y1/500)*1e6+$x1};
      $mode=0;
      next;
    }
    if    (/$jpg/)  {$mode=1;}
    elsif (/^2 2 /) {$mode=2;}
    elsif (/^4(\s+\S+){10}\s+(\d+)\s+(\d+)\s+(\S+)\\001/) {
      push @texts, {x=>$2, y=>$3, t=>$4};
      $mode=0;
    }
    else {$mode=0;}
  }
  print "  fig size: $fW x $fH\n";

  # join text to frames
  for (my $n=0; $n<=$#frames; $n++){
    my $f=$frames[$n];
    foreach my $t (@texts){
      if ($t->{x} > $f->{x1} && $t->{x} < $f->{x2} &&
          $t->{y} > $f->{y1} && $t->{y} < $f->{y2}){
        $frames[$n]->{t}=$t->{t};
      }
    }
  }


  # process frames:
  my $num=0;
  foreach (sort {$a->{sortkey} <=> $b->{sortkey}} @frames){
    $num++;
    # note that in the fig ccw-rotated picture is used!
    my $x1 = int($W - $_->{y2}/$fH*$W);
    my $x2 = int($W - $_->{y1}/$fH*$W);
    my $y1 = int($_->{x1}/$fW*$H);
    my $y2 = int($_->{x2}/$fW*$H);

    # Infrared size calibration (non-rotated coords).
    # Measured IR->PIC coordinates
    my ($x1src, $x1dst, $x2src, $x2dst) = (6,15,3020,3010);
    my ($y1src, $y1dst, $y2src, $y2dst) = (0,0,11799,11797);
    my $ax = ($x1src-$x2src)/($x1dst-$x2dst);
    my $bx = $x1src-$x1dst*$ax;
    my $ay = ($y1src-$y2src)/($y1dst-$y2dst);
    my $by = $y1src-$y1dst*$ay;
    my $x1i = int($x1*$ax + $bx); # pic->ir
    my $x2i = int($x2*$ax + $bx);
    my $y1i = int($y1*$ay + $by);
    my $y2i = int($y2*$ay + $by);

    #process text for this frame:
    my $t = $_->{t};
    my $flt="";
    $flt="| pamflip -r180" if ($t=~s/RR// || $t=~s/LL//);
    $flt="| pamflip -ccw" if ($t=~s/L//);
    $flt="| pamflip -cw" if ($t=~s/R//);
    $t=sprintf("x%02d", $num) if $t eq "";

    print "  frame $t: $x1 - $x2, $y1 - $y2\n";
    #print "  frame: $x1i - $x2i, $y1i - $y2i\n";
    my $frW = $x2-$x1+1;
    my $frH = $y2-$y1+1;
    mkdir ${n} or 1;

    # RGB 48-bit pnm image
    `pamcut -left $x1 -right $x2 -top $y1 -bottom $y2 $pnm |\
       pamflip -ccw $flt > ${n}/${t}_u.pnm`;
    `./1628 -R 130 -G 140 -B 150 ${n}/${t}_u.pnm |\
        cjpeg -quality 95 > ${n}/${t}o.jpg`;

    # IR 16-bit pnm image
    `pamcut -left $x1i -right $x2i -top $y1i -bottom $y2i $ir |\
       pamscale -width $frW -height $frH |\
       pamflip -ccw $flt > ${n}/${t}_ir.pnm`;
    #`cat ${n}/${t}_ir.pnm | cjpeg -quality 95 > ${n}/${t}_ir.jpg`;

    # corrected image
    #`./undust2 -T 0.06 -R 10 -D ${n}/${t}_d.pnm ${n}/$t.pnm ${n}/${t}_ir.pnm|\
    #   > ${n}/${t}_corr.pnm`;
    #`./1628 -R 125 -G 135 -B 145 ${n}/${t}_corr.pnm |\
    #    cjpeg -quality 95 > ${n}/${t}_corr.jpg`;
    #`cat ${n}/${t}_d.pnm | cjpeg -quality 95 > ${n}/${t}_d.jpg`;

  }


}
